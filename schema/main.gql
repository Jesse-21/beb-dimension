type Link {
  _id: ID
  url: String
  image: String
  title: String
  description: String
  logo: String
  iframe: String
}

type Chain {
  chainId: Int
  name: String
}

type AddressNonce {
  _id: ID
  nonce: String
  transactionNonce: String
}

type Address {
  _id: ID
  address: String!
  chain: Chain
  nonce: AddressNonce
}

type MessageCurrentAddressPermissions {
  _id: ID
  canHide: Boolean
  canRead(channelId: String): Boolean
}

type FarcasterIdentity {
  _id: ID
  directoryUrl: String
  avatarUrl: String
  username: String
  displayName: String
  address: Address
  farcasterAddress: String
}

type RentPrice {
  base: String
  premium: String
}

type Commitment {
  hash: String
  secret: String
}

type KeyValueFields {
  _id: ID
  key: String
  value: String
}

type RichEmbed {
  _id: ID
  title: String
  description: Content
  timestamp: String
  image: Image
  thumbnail: Image
  color: String
  url: String
  fields: KeyValueFields
}

type ImageUnion {
  _id: ID
  image: Image
  type: String
}
type LinkUnion {
  _id: ID
  link: Link
  type: String
}
type RichEmbedUnion {
  _id: ID
  richEmbed: RichEmbed
  type: String
}

union RichBlock = ImageUnion | LinkUnion | RichEmbedUnion

type RichContentBlock {
  id: ID
  blockType: String
  # can include multiple different blocks. use graphql union
  block: RichBlock
}

type RichContent {
  _id: ID
  content: Content
  blocks: [RichContentBlock]
}

type Content {
  raw: String
  json: String
  html: String
}

type Image {
  _id: ID
  src: String
  name: String
  isVerified: Boolean
  verificationOrigin: String
  verificationExternalUrl: String
}

type AddressDimension {
  _id: ID
  address: Address
  community: Dimension
  joined: Boolean
  canRead(channelId: String): Boolean
  canWrite(channelId: String): Boolean
  validPermission(
    permissionIdentifier: String
    permissionId: String
    channelId: String
  ): Boolean
  unseenPostsCount: Int
  lastSeen: String
  tokenCount: Int # @TODO deprecate
}

type AddressDimensionRole {
  _id: ID
  addressDimension: AddressDimension
  role: Role
  isManagedByIndexer: Boolean
  isValid: Boolean
}
type Role {
  _id: ID
  name: String
  description: Content
  dimension: Dimension
  slug: String
  position: Int
  editable: Boolean
  icon: Image
  isManagedByIndexer: Boolean
  permissionString: String
  membersCount: Int
  members(limit: Int, offset: Int, sort: String): [AddressDimensionRole]
  AddressDimensionRole: AddressDimensionRole # the current address associated with role. require auth
}

type Dimension {
  _id: ID
  description: String # @Todo remove this fields
  bio: Content
  name: String
  host: String
  image: Image
  bannerImage: Image
  membersCount: Int
  bebdomain: String
  AddressDimension: AddressDimension # the current address associated with dimension, require auth
  members(limit: Int, offset: Int, sort: String): [AddressDimension]
  owner: Address
  tokenOwnerAddress: String
  permissions: [Permission]
  roles(limit: Int, offset: Int, sort: String): [Role]
  channels: [Channel]
  tokenId: ID
  tld: String
  available: Boolean
  expiresAt: String
  rentPrice(duration: String): RentPrice
  commitment(address: String, duration: String): Commitment
  # admin
}
type Message {
  _id: ID
  richContent: RichContent
  channel: Channel
  address: Address
  parent: Message
  replies(limit: Int, offset: Int): [Message]
  createdAt: String
  reactionCount: Int
  commentCount: Int
  rootCommentCount: Int
  dimension: Dimension
  isHidden: Boolean
  # admin
  currentAddressPermissions: MessageCurrentAddressPermissions
}
type Channel {
  _id: ID
  name: String
  slug: String
  dimension: Dimension
  description: Content
  position: Int
  color: String
  icon: Image
  permissionOverwrites: [PermissionOverwrite]
}
type Permission {
  _id: ID
  dimension: Dimension
  description: Content
  name: String
  editable: Boolean
  bitwiseFlag: String
  bitwisePosition: Int
}
union PermissionOverwriteObject = Role | Address
type PermissionOverwrite {
  _id: ID
  object: PermissionOverwriteObject
  allowedPermissionString: String
  objectType: Int
}

type Query {
  dimensions: [Dimension]
}
